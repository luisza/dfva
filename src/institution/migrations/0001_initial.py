# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-01-01 21:15
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import institution.models
import institution.presentation
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('corebase', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthenticateDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('identification', models.CharField(help_text='Debe tener el formato 08-8888-8888 para nacionales o 500000000000 o 100000000000', max_length=15, validators=[django.core.validators.RegexValidator('(^[1|5]\\d{11}$)|(^\\d{2}-\\d{4}-\\d{4}$)', message='Debe tener el formato 08-8888-8888 para nacionales o 500000000000 o 100000000000')])),
                ('request_datetime', models.DateTimeField(help_text="'%Y-%m-%d %H:%M:%S',   es decir  '2006-10-25 14:30:59'")),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(0, 'Solicitud recibida correctamente.'), (1, 'Ha ocurrido algún problema al solicitar la firma o autenticación.'), (2, 'Solicitud con campos incompletos.'), (3, 'Existe una diferencia no permitida entre la fecha y hora del cliente y la del servidor. La fecha/hora de la solicitud no debe tener una diferencia de más de 60 segundos de la fecha/hora del servidor.'), (4, 'La entidad no se encuentra registrada.'), (5, 'La entidad se encuentra en estado inactiva.'), (6, 'El negocio no pertenece a la entidad solicitante.'), (7, 'El tamaño del resumen de la solicitud de firma es no valido, este debe ser mayor a 1 y menor a  250 caracteres.'), (8, 'El tamaño de la razón de firma de la solicitud de firma PAdES es inválida, este debe ser mayor a 1 y menor a  125 caracteres.'), (9, 'El suscriptor se encuentra desconectado para recibir una solicitud.'), (10, 'El formato de la identificación enviado no es válido, este debe tener un formato para un nacional 0#-####-#### para un DIDI 5########### para un DIMEX 1###########')], default=0)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('sign_document', models.TextField(blank=True, null=True)),
                ('response_datetime', models.DateTimeField(auto_now=True)),
                ('expiration_datetime', models.DateTimeField()),
                ('id_transaction', models.IntegerField(db_index=True, default=0)),
                ('duration', models.SmallIntegerField(default=3)),
                ('received_notification', models.BooleanField(default=False)),
                ('resume', models.CharField(blank=True, max_length=250, null=True)),
                ('hash_docsigned', models.TextField(blank=True, null=True)),
                ('hash_id_docsigned', models.SmallIntegerField(default=0)),
                ('notification_url', models.URLField()),
            ],
            options={
                'ordering': ('request_datetime',),
                'permissions': (('view_authenticatedatarequest', 'Can see available Authenticate Data Request'),),
            },
        ),
        migrations.CreateModel(
            name='AuthenticateRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text='Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público de la institución (ver Institución) ')),
                ('institution', models.CharField(help_text='UUID de la institución', max_length=50)),
                ('encrypt_method', models.CharField(blank=True, choices=[('aes_eax', 'aes_eax (recomendado)'), ('aes-256-cfb', 'aes-256-cfb')], default='aes_eax', max_length=25)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='institution.AuthenticateDataRequest')),
            ],
            options={
                'ordering': ('arrived_time',),
                'permissions': (('view_authenticaterequest', 'Can see available Authenticate Request'),),
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('name', models.CharField(max_length=250)),
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('bccr_bussiness', models.IntegerField(default=1)),
                ('bccr_entity', models.IntegerField(default=1)),
                ('domain', models.CharField(max_length=250)),
                ('institution_unit', models.CharField(default='ND', max_length=250)),
                ('private_key', models.TextField()),
                ('public_key', institution.models.EncrytedText()),
                ('public_certificate', institution.models.EncrytedText()),
                ('server_sign_key', institution.models.EncrytedText()),
                ('server_public_key', institution.models.EncrytedText()),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=25, null=True)),
                ('administrative_institution', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('pk',),
                'permissions': (('view_institution', 'Can see available tasks'),),
            },
            bases=(models.Model, institution.presentation.PEMpresentation),
        ),
        migrations.CreateModel(
            name='InstitutionStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(default=1)),
                ('notified', models.BooleanField(default=False)),
                ('transaction_id', models.IntegerField()),
                ('data_type', models.SmallIntegerField(choices=[(0, 'Autenticación'), (1, 'Firma'), (2, 'Validación de certificado'), (3, 'Validación de documento')])),
                ('document_type', models.CharField(default='n/d', max_length=15)),
                ('was_successfully', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institution.Institution')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=250)),
                ('url', models.URLField(blank=True, null=True)),
                ('not_webapp', models.BooleanField(default=False)),
                ('is_demo', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institution.Institution')),
            ],
            options={
                'ordering': ('institution',),
                'permissions': (('view_notificationurl', 'Can see available notification urls'),),
            },
        ),
        migrations.CreateModel(
            name='SignDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('identification', models.CharField(help_text='Debe tener el formato 08-8888-8888 para nacionales o 500000000000 o 100000000000', max_length=15, validators=[django.core.validators.RegexValidator('(^[1|5]\\d{11}$)|(^\\d{2}-\\d{4}-\\d{4}$)', message='Debe tener el formato 08-8888-8888 para nacionales o 500000000000 o 100000000000')])),
                ('request_datetime', models.DateTimeField(help_text="'%Y-%m-%d %H:%M:%S',   es decir  '2006-10-25 14:30:59'")),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(0, 'Solicitud recibida correctamente.'), (1, 'Ha ocurrido algún problema al solicitar la firma o autenticación.'), (2, 'Solicitud con campos incompletos.'), (3, 'Existe una diferencia no permitida entre la fecha y hora del cliente y la del servidor. La fecha/hora de la solicitud no debe tener una diferencia de más de 60 segundos de la fecha/hora del servidor.'), (4, 'La entidad no se encuentra registrada.'), (5, 'La entidad se encuentra en estado inactiva.'), (6, 'El negocio no pertenece a la entidad solicitante.'), (7, 'El tamaño del resumen de la solicitud de firma es no valido, este debe ser mayor a 1 y menor a  250 caracteres.'), (8, 'El tamaño de la razón de firma de la solicitud de firma PAdES es inválida, este debe ser mayor a 1 y menor a  125 caracteres.'), (9, 'El suscriptor se encuentra desconectado para recibir una solicitud.'), (10, 'El formato de la identificación enviado no es válido, este debe tener un formato para un nacional 0#-####-#### para un DIDI 5########### para un DIMEX 1###########')], default=0)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('sign_document', models.TextField(blank=True, null=True)),
                ('response_datetime', models.DateTimeField(auto_now=True)),
                ('expiration_datetime', models.DateTimeField()),
                ('id_transaction', models.IntegerField(db_index=True, default=0)),
                ('duration', models.SmallIntegerField(default=3)),
                ('received_notification', models.BooleanField(default=False)),
                ('resume', models.CharField(blank=True, max_length=250, null=True)),
                ('hash_docsigned', models.TextField(blank=True, null=True)),
                ('hash_id_docsigned', models.SmallIntegerField(default=0)),
                ('document_format', models.CharField(default='n/d', max_length=25)),
                ('place', models.CharField(blank=True, max_length=150, null=True)),
                ('reason', models.CharField(blank=True, max_length=125, null=True)),
                ('notification_url', models.URLField()),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institution.Institution')),
            ],
            options={
                'ordering': ('request_datetime',),
                'permissions': (('view_signerdatarequest', 'Can see available Signer Data Request'),),
            },
        ),
        migrations.CreateModel(
            name='SignRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text='Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público de la institución (ver Institución) ')),
                ('institution', models.CharField(help_text='UUID de la institución', max_length=50)),
                ('encrypt_method', models.CharField(blank=True, choices=[('aes_eax', 'aes_eax (recomendado)'), ('aes-256-cfb', 'aes-256-cfb')], default='aes_eax', max_length=25)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='institution.SignDataRequest')),
            ],
            options={
                'ordering': ('arrived_time',),
                'permissions': (('view_signrequest', 'Can see available Sign Request'),),
            },
        ),
        migrations.CreateModel(
            name='ValidateCertificateDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('identification', models.CharField(help_text='Debe tener el formato 08-8888-8888 para nacionales o 500000000000 o 100000000000', max_length=15, null=True, validators=[django.core.validators.RegexValidator('(^[1|5]\\d{11}$)|(^\\d{2}-\\d{4}-\\d{4}$)', message='Debe tener el formato 08-8888-8888 para nacionales o 500000000000 o 100000000000')])),
                ('request_datetime', models.DateTimeField(help_text="'%Y-%m-%d %H:%M:%S',   es decir  '2006-10-25 14:30:59'")),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(0, 'Certificado válido.'), (1, 'Error interno al validar el certificado.'), (2, 'Los bytes enviados no corresponden a  un certificado.'), (3, 'El certificado del suscriptor está vencido.'), (4, 'El certificado del suscriptor está revocado.'), (5, 'El Certificado enviado no es de confianza porque no es emitido  por la CA Raíz Nacional.'), (6, 'El certificado enviado no es de autenticación.'), (7, 'El certificado tiene un problema de estructura, no cuenta con el oid  de ocsp en el que se encuentra la dirección del servicio.'), (8, 'El certificado tiene un problema de estructura, no cuenta con los usos de la clave necesarios para un certificado de autenticación.'), (9, 'El certificado tiene un problema de estructura, el campo  CN del sujeto tiene una estructura inválida.'), (10, 'El certificado tiene un problema de estructura, el campo  SERIALNUMBER del sujeto tiene una estructura inválida.'), (11, 'La entidad no se encuentra registrada.'), (12, 'La entidad no se encuentra en estado inactiva.')], default=0)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('response_datetime', models.DateTimeField(auto_now=True)),
                ('was_successfully', models.BooleanField(default=True)),
                ('full_name', models.CharField(max_length=250, null=True)),
                ('start_validity', models.DateTimeField(null=True)),
                ('end_validity', models.DateTimeField(null=True)),
                ('notification_url', models.URLField()),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institution.Institution')),
            ],
            options={
                'ordering': ('request_datetime',),
                'permissions': (('view_validatecertificatedatarequest', 'Can see available validate certificate Data Request'),),
            },
        ),
        migrations.CreateModel(
            name='ValidateCertificateRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text='Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público de la institución (ver Institución) ')),
                ('institution', models.CharField(help_text='UUID de la institución', max_length=50)),
                ('encrypt_method', models.CharField(blank=True, choices=[('aes_eax', 'aes_eax (recomendado)'), ('aes-256-cfb', 'aes-256-cfb')], default='aes_eax', max_length=25)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='institution.ValidateCertificateDataRequest')),
            ],
            options={
                'ordering': ('arrived_time',),
                'permissions': (('view_validaterequest', 'Can see available validate certificate Request'),),
            },
        ),
        migrations.CreateModel(
            name='ValidateDocumentDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_datetime', models.DateTimeField()),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('format', models.CharField(choices=[('cofirma', 'CoFirma'), ('contrafirma', 'ContraFirma'), ('msoffice', 'MS Office'), ('odf', 'Open Document Format'), ('pdf', 'PDF')], default='n/d', max_length=15)),
                ('status', models.IntegerField(default=0)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('was_successfully', models.BooleanField(default=True)),
                ('notification_url', models.URLField()),
                ('errors', models.ManyToManyField(to='corebase.ErrorFound')),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institution.Institution')),
                ('signers', models.ManyToManyField(to='corebase.Signer')),
                ('warnings', models.ManyToManyField(to='corebase.WarningReceived')),
            ],
            options={
                'ordering': ('request_datetime',),
                'permissions': (('view_validatedocumentdatarequest', 'Can see available validate document Data Request'),),
            },
        ),
        migrations.CreateModel(
            name='ValidateDocumentRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text='Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público de la institución (ver Institución) ')),
                ('institution', models.CharField(help_text='UUID de la institución', max_length=50)),
                ('encrypt_method', models.CharField(blank=True, choices=[('aes_eax', 'aes_eax (recomendado)'), ('aes-256-cfb', 'aes-256-cfb')], default='aes_eax', max_length=25)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='institution.ValidateDocumentDataRequest')),
            ],
            options={
                'ordering': ('arrived_time',),
                'permissions': (('view_validatedocumentrequest', 'Can see validate document Sign Request'),),
            },
        ),
        migrations.AddField(
            model_name='authenticatedatarequest',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institution.Institution'),
        ),
    ]
