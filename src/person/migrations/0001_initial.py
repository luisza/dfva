# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-09-13 15:59
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('corebase', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthenticatePersonDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identification', models.CharField(help_text="'%Y-%m-%d %H:%M:%S',   es decir  '2006-10-25 14:30:59'", max_length=15, validators=[django.core.validators.RegexValidator('^(\\d{9,11})$', message='Debe contener 9 dígitos o 11 para extranjeros y 10 para cédulas jurídicas por ejemplo: 102340456 para nacionales o 10234045611 para extranjeros')])),
                ('request_datetime', models.DateTimeField()),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(1, 'Solicitud recibida correctamente'), (2, 'Ha ocurrido algún problema al solicitar la firma'), (3, 'Solicitud con campos incompletos'), (4, 'Diferencia de hora no permitida entre cliente y servidor'), (5, 'La entidad no se encuentra registrada'), (6, 'La entidad se encuentra en estado inactiva'), (7, 'La URL no pertenece a la entidad solicitante'), (8, 'El tamaño de hash debe ser entre 1 y 130 caracteres'), (9, 'Algoritmo desconocido'), (10, 'Certificado incorrecto')], default=1)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('sign_document', models.TextField(blank=True, null=True)),
                ('response_datetime', models.DateTimeField(auto_now=True)),
                ('expiration_datetime', models.DateTimeField()),
                ('id_transaction', models.IntegerField(default=0)),
                ('duration', models.SmallIntegerField(default=3)),
                ('received_notification', models.BooleanField(default=False)),
            ],
            options={
                'permissions': (('view_authenticatepersondatarequest', 'Can see available Authenticate Person Data Request'),),
                'ordering': ('request_datetime',),
            },
        ),
        migrations.CreateModel(
            name='AuthenticatePersonRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text=' Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público  de firma, para firma digital avanzada')),
                ('person', models.CharField(help_text='Identificación de la persona solicitante', max_length=50)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='person.AuthenticatePersonDataRequest')),
            ],
            options={
                'permissions': (('view_authenticatepersonrequest', 'Can see available Authenticate Person Request'),),
                'ordering': ('arrived_time',),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('identification', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('token', models.TextField(blank=True, null=True)),
                ('cipher_token', models.TextField(blank=True, null=True)),
                ('expiration_datetime_token', models.DateTimeField(blank=True, null=True)),
                ('last_error_code', models.SmallIntegerField(choices=[(1, 'Transacción satisfactoria'), (2, 'Error, persona no existe'), (3, 'Error no determinado')], default=1)),
                ('authenticate_certificate', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PersonLogin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('public_certificate', models.TextField(help_text='Certificado público  de firma, para firma digital avanzada')),
                ('code', models.TextField()),
                ('person', models.CharField(help_text='Identificación de la persona solicitante', max_length=50)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text=' Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='SignPersonDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identification', models.CharField(help_text="'%Y-%m-%d %H:%M:%S',   es decir  '2006-10-25 14:30:59'", max_length=15, validators=[django.core.validators.RegexValidator('^(\\d{9,11})$', message='Debe contener 9 dígitos o 11 para extranjeros y 10 para cédulas jurídicas por ejemplo: 102340456 para nacionales o 10234045611 para extranjeros')])),
                ('request_datetime', models.DateTimeField()),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(1, 'Solicitud recibida correctamente'), (2, 'Ha ocurrido algún problema al solicitar la firma'), (3, 'Solicitud con campos incompletos'), (4, 'Diferencia de hora no permitida entre cliente y servidor'), (5, 'La entidad no se encuentra registrada'), (6, 'La entidad se encuentra en estado inactiva'), (7, 'La URL no pertenece a la entidad solicitante'), (8, 'El tamaño de hash debe ser entre 1 y 130 caracteres'), (9, 'Algoritmo desconocido'), (10, 'Certificado incorrecto')], default=1)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('response_datetime', models.DateTimeField(auto_now=True)),
                ('expiration_datetime', models.DateTimeField()),
                ('id_transaction', models.IntegerField(default=0)),
                ('sign_document', models.TextField(blank=True, null=True)),
                ('duration', models.SmallIntegerField(default=3)),
                ('received_notification', models.BooleanField(default=False)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='person.Person')),
            ],
            options={
                'permissions': (('view_signerdatarequest', 'Can see available Signer Person Data Request'),),
                'ordering': ('request_datetime',),
            },
        ),
        migrations.CreateModel(
            name='SignPersonRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text=' Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público  de firma, para firma digital avanzada')),
                ('person', models.CharField(help_text='Identificación de la persona solicitante', max_length=50)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='person.SignPersonDataRequest')),
            ],
            options={
                'permissions': (('view_signpersonrequest', 'Can see available Person Sign Request'),),
                'ordering': ('arrived_time',),
            },
        ),
        migrations.CreateModel(
            name='ValidatePersonCertificateDataRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identification', models.CharField(help_text="'%Y-%m-%d %H:%M:%S',   es decir  '2006-10-25 14:30:59'", max_length=15, null=True, validators=[django.core.validators.RegexValidator('^(\\d{9,11})$', message='Debe contener 9 dígitos o 11 para extranjeros y 10 para cédulas jurídicas por ejemplo: 102340456 para nacionales o 10234045611 para extranjeros')])),
                ('request_datetime', models.DateTimeField()),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(1, 'Solicitud recibida correctamente'), (2, 'Ha ocurrido algún problema al solicitar la firma'), (3, 'Solicitud con campos incompletos'), (4, 'Diferencia de hora no permitida entre cliente y servidor'), (5, 'La entidad no se encuentra registrada'), (6, 'La entidad se encuentra en estado inactiva'), (7, 'La URL no pertenece a la entidad solicitante'), (8, 'El tamaño de hash debe ser entre 1 y 130 caracteres'), (9, 'Algoritmo desconocido'), (10, 'Certificado incorrecto')], default=1)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('response_datetime', models.DateTimeField(auto_now=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='person.Person')),
            ],
            options={
                'permissions': (('view_validatePersoncertificatedatarequest', 'Can see available validate Person certificate Data Request'),),
                'ordering': ('request_datetime',),
            },
        ),
        migrations.CreateModel(
            name='ValidatePersonCertificateRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text=' Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público  de firma, para firma digital avanzada')),
                ('person', models.CharField(help_text='Identificación de la persona solicitante', max_length=50)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='person.ValidatePersonCertificateDataRequest')),
            ],
            options={
                'permissions': (('view_validatePersonrequest', 'Can see available validate certificate Request'),),
                'ordering': ('arrived_time',),
            },
        ),
        migrations.CreateModel(
            name='ValidatePersonDocumentDataRequest',
            fields=[
                ('basedocument_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='corebase.BaseDocument')),
                ('request_datetime', models.DateTimeField()),
                ('code', models.CharField(default='N/D', max_length=20)),
                ('status', models.IntegerField(choices=[(1, 'Solicitud recibida correctamente'), (2, 'Ha ocurrido algún problema al solicitar la firma'), (3, 'Solicitud con campos incompletos'), (4, 'Diferencia de hora no permitida entre cliente y servidor'), (5, 'La entidad no se encuentra registrada'), (6, 'La entidad se encuentra en estado inactiva'), (7, 'La URL no pertenece a la entidad solicitante'), (8, 'El tamaño de hash debe ser entre 1 y 130 caracteres'), (9, 'Algoritmo desconocido'), (10, 'Certificado incorrecto')], default=1)),
                ('status_text', models.CharField(default='n/d', max_length=256)),
                ('fue_exitosa', models.BooleanField(default=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='person.Person')),
            ],
            options={
                'permissions': (('view_validatepersondocumentdatarequest', 'Can see available validate document Data Request'),),
                'ordering': ('request_datetime',),
            },
            bases=('corebase.basedocument',),
        ),
        migrations.CreateModel(
            name='ValidatePersonDocumentRequest',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrived_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data_hash', models.CharField(help_text='Suma hash de datos de tamaño máximo 130 caracteres, usando el\n                                 algoritmo especificado ', max_length=130)),
                ('algorithm', models.CharField(choices=[('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], help_text=' Debe ser alguno de los siguientes: sha256, sha384, sha512', max_length=7)),
                ('public_certificate', models.TextField(help_text='Certificado público  de firma, para firma digital avanzada')),
                ('person', models.CharField(help_text='Identificación de la persona solicitante', max_length=50)),
                ('fue_exitosa', models.BooleanField(default=True)),
                ('nombre_completo', models.CharField(max_length=250, null=True)),
                ('inicio_vigencia', models.DateTimeField(null=True)),
                ('fin_vigencia', models.DateTimeField(null=True)),
                ('data_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='person.ValidatePersonDocumentDataRequest')),
            ],
            options={
                'permissions': (('view_validatepersondocumentrequest', 'Can see validate document Sign Request'),),
                'ordering': ('arrived_time',),
            },
        ),
        migrations.AddField(
            model_name='authenticatepersondatarequest',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='person.Person'),
        ),
    ]
