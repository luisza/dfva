#RSA TEST

from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
import io
from corebase.test.environment import SERVER_PUBLIC_KEY
from signer.test.xmlfile import XMLFILE
from base64 import b64decode, b64encode
from corebase.models import Institution


file_out = io.BytesIO()
recipient_key = RSA.importKey(SERVER_PUBLIC_KEY)
session_key = get_random_bytes(16)

# Encrypt the session key with the public RSA key
cipher_rsa = PKCS1_OAEP.new(recipient_key)
file_out.write(cipher_rsa.encrypt(session_key))

# Encrypt the data with the AES session key
cipher_aes = AES.new(session_key, AES.MODE_EAX)
ciphertext, tag = cipher_aes.encrypt_and_digest(XMLFILE.encode('utf-8'))
[file_out.write(x) for x in (cipher_aes.nonce, tag, ciphertext)]

file_out.seek(0)
encypted=b64encode(file_out.read())

raw_cipher_data = b64decode(encypted)
file_in = io.BytesIO(raw_cipher_data)
file_in.seek(0)
PRIVATE_KEY=Institution.objects.first().server_sign_key
private_key = RSA.import_key(PRIVATE_KEY)


enc_session_key, nonce, tag, ciphertext = \
   [ file_in.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]

cipher_rsa = PKCS1_OAEP.new(private_key)
session_key = cipher_rsa.decrypt(enc_session_key)

cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
data = cipher.decrypt_and_verify(ciphertext, tag)

